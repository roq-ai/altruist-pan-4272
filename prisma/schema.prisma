generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model achievement {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  description     String?       @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ai_opponent {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  skill_level     Int
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model bike {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  speed           Int
  handling        Int
  acceleration    Int
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model game_mode {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  description     String?       @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model leaderboard {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?       @db.VarChar(255)
  image       String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  achievement achievement[]
  ai_opponent ai_opponent[]
  bike        bike[]
  game_mode   game_mode[]
  leaderboard leaderboard[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  power_up    power_up[]
  track       track[]
  upgrade     upgrade[]
}

model power_up {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  description     String?       @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model track {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String        @db.VarChar(255)
  difficulty_level Int
  terrain          String        @db.VarChar(255)
  obstacles        String        @db.VarChar(255)
  organization_id  String?       @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  organization     organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model upgrade {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  description     String?       @db.VarChar(255)
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  organization    organization? @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}
